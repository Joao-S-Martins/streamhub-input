{
  "name": "cajon",
  "description": "A browser module loader that can load CommonJS/node and AMD modules. Built on top of RequireJS.",
  "version": "0.1.14",
  "homepage": "http://github.com/requirejs/cajon",
  "author": {
    "name": "James Burke",
    "email": "jrburke@gmail.com",
    "url": "http://github.com/jrburke"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/requirejs/cajon/blob/master/LICENSE"
    },
    {
      "type": "MIT",
      "url": "https://github.com/requirejs/cajon/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/requirejs/cajon.git"
  },
  "main": "cajon.js",
  "volo": {
    "url": "https://raw.github.com/requirejs/cajon/{version}/cajon.js"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "readme": "# cajon\n\n[Cajon](http://en.wikipedia.org/wiki/Caj%C3%B3n) is a JavaScript module loader\nfor the browser that can load CommonJS/node and AMD modules. It is built\non top of [RequireJS](https://github.com/jrburke/requirejs).\n\nYou can use it to code modules for your project in CommonJS/node style, then\nuse the [RequireJS Optimizer](http://requirejs.org/docs/optimizer.html) to\nbuild all the modules into an AMD-compliant bundle. This allows you to\nthen use a small AMD API shim, like\n[almond](https://github.com/jrburke/almond), to get nicely optimized code\nwithout needing a full runtime loader.\n\n## Why?\n\nWhy use this instead of RequireJS? Some possible reasons:\n\n1) You cannot bring yourself to use a wrapper like this around your module\ncode:\n\n```javascript\ndefine(function(require) {\n    /*module code here */\n});\n```\n\n2) You have a set of code already formatted in CommonJS/node style you\nwant to reuse.\n\nOtherwise, you should be using RequireJS, or another AMD loader.\n\nNote the [Restrictions](#restrictions) section below. You will likely gnash your\nteeth in frustration if you do not heed them.\n\nIf you do not like this particular loader, but like the idea of a\ndual AMD and CommonJS/node style module loader, then you may like\nLinkedIn's [Inject](https://github.com/linkedin/inject) loader better.\n\n## How does it work?\n\nCajon is constructed with:\n\n* RequireJS (needs 2.0.2 or later)\n* An override to requirejs.load that fetches scripts via async\nXHR requests then evals them, using the `//@ sourceURL=` to\nspecify the script names for script debuggers.\n\nCajon will only use the XHR+eval approach if the request is to the\nsame domain as the HTML document. If the script request is deemed to be on\nanother domain, it will just delegate to the default requirejs.load()\nfunction, where it will load the script with a `<script>` tag, and expect it\nto be in AMD format, or a traditional \"browser globals\" script.\n\nYou can override this behavior to use XHR for some cross domain requests if\nyou know your users will be using CORS-enabled browsers and servers.\nSee the **Configuration** section below.\n\nScripts that are fetched are wrapped in the following\n[AMD wrapper](http://requirejs.org/docs/whyamd.html#sugar):\n\n```javascript\ndefine(function (require, exports, module) {\n    /* module code here */\n});\n```\n\nand it allows the use of __dirname and __filename inside that\nwrapped code.\n\nCajon assigns the `cajon` variable to the be same as the `requirejs`\nvariable, so you can use that if you want to specifically call out the usage\nof cajon. However, the requirejs optimizer only understands\nof `require`, `requirejs` and `define`, it will not understand `cajon`. This is\nparticularly important if you are using the optimizer's `mainConfigFile`\noption.\n\nIt is best to just use the global `require` if you want the code to be\nportable to RequireJS, almond and other AMD loaders, and only do detection\nof `cajon` if you want to know if cajon is available.\n\n## How to use it\n\nThere is a `demo` directory that shows example use, but basically,\nput cajon.js in a `<script>` tag and load modules via `require([])`.\nNote the [Restrictions](#restrictions) section below though.\n\nTo optimize the demo, run:\n\n    node tools/r.js -o demo/app.build.js\n\nThis will generate the optimized project in a `demo-built` directory. All\nthe modules in the build output will have been converted to AMD style, so\nthat they can be loaded cross-domain without needing special CORS\nconsiderations.\n\nThe app.build.js build profile requires the r.js optimizer to be\nversion 2.0.2 or later, because it uses 2.0.2's `cjsTranslate` build option\nthat converts CommonJS/node modules to be define()-wrapped for the build.\n\n## Install\n\nIf using [volo](https://github.com/volojs/volo):\n\n    volo add cajon\n\nIf using npm:\n\n    npm install cajon\n\nOr URL to latest release:\n\n    https://raw.github.com/requirejs/cajon/latest/cajon.js\n\n## Restrictions\n\n### Does not use node's module ID-to-path rules\n\nSo do not expect to `npm install` some code, then be able to require it\nusing cajon.\n\nNode uses multiple `node_modules` path lookups to find code and this is not\nefficient to do in a browser context. Also, many node modules depend on\nnode's standard library or Node's environment, which are not available by\ndefault in the web browser.\n\nIf you do want to use some npm-installed code, and you know it will run\nin the browser, you can get it to work with cajon, but you will likely\nneed to use the **paths**, **map** and **packages**\n[requirejs config](http://requirejs.org/docs/api.html#config) to get it to\nwork.\n\n### Avoid computed require('') calls.\n\nCommonJS/node module systems are synchronous, local file IO systems. So\nthey allow these kinds of constructs:\n\n```javascript\n//first example\nvar id = someCondition ? 'a' : 'b';\nvar a = require(id);\n\n//second example\nvar a;\nif (someCondition) {\n    a = require('a');\n} else {\n    b = require('b');\n}\n```\n\nThe first example will fail in an AMD browser environment, since all\ndependencies need to be known, downloaded and executed before the code\nruns. If 'a' and 'b' are not already in that state, that first example\nwill likely generate an error.\n\nThe second example can work, but know that the AMD loader will download\nand execute 'a' and 'b' before running that code.\n\nIf you use a runtime decision to grab a dependency, use the callback-style\nrequire() supported by AMD loaders:\n\n```javascript\nvar id = someCondition ? 'a' : 'b';\nrequire([id], function (mod) {\n    //do something with mod now\n    //that it has been asynchronously\n    //loaded and executed.\n})\n```\n\nOr consider creating an AMD loader plugin that can do the decision logic\nbut still be treated as a single string literal dependency:\n\n```javascript\nvar dep = require('has!condition?succesModuleId:failModuleId');\n```\n\nBoth callback-style require and loader plugins are usable with cajon\nsince it is just using requirejs behind the scenes.\n\n## Configuration\n\nCajon will only use the XHR+eval approach if the request is to the\nsame domain as the HTML document. You can override this behavior\nif you know CORS-enabled browsers and servers will be used.\n\nSet up a `useXhr` function in a `cajon` config passed to the loader:\n\n```javascript\nrequire.config({\n    cajon: {\n        useXhr: function (url, protocol, hostname, port) {\n            //Return true if XHR is usable, false if the\n            //script tag approach to an AMD module/browser globals\n            //script should be used.\n\n            //url is the url being requested.\n            //protocol, hostname and port area all values from the\n            //current page that is using cajon. Compare them with\n            //what is in `url` to make your decision.\n        }\n    }\n});\n```\n\nIf you need to configure each XHR object before it sends out its request,\nyou can implement an `onXhr` method that gets called after xhr.open(), but\nbefore xhr.onreadystatechange() is set up and before xhr.send() is called:\n\n```javascript\nrequire.config({\n    cajon: {\n        onXhr: function (xhr, url) {\n            //xhr is the XHMLHttpRequest object.\n            //url is the URL the xhr object is set to use.\n        }\n    }\n});\n```\n\n## License\n\nMIT and new BSD.\n\n",
  "readmeFilename": "README.md",
  "_id": "cajon@0.1.14",
  "dist": {
    "shasum": "e6ca6de622183556a18489652d9c3f0515249f5c"
  },
  "_from": "cajon@~0.1.11"
}
